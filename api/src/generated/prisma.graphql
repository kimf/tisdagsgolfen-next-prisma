# source: https://eu1.prisma.sh/kim-fransman-4c718b/tisdagsgolfen/dev
# timestamp: Sat Sep 08 2018 22:50:56 GMT+0200 (Central European Summer Time)

type AggregateCourse {
  count: Int!
}

type AggregateHole {
  count: Int!
}

type AggregatePlayer {
  count: Int!
}

type AggregateScoringSession {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Course implements Node {
  id: ID!
  club: String!
  name: String!
  holes(where: HoleWhereInput, orderBy: HoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hole!]
}

"""A connection to a list of items."""
type CourseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  club: String!
  name: String!
  holes: HoleCreateManyWithoutCourseInput
}

input CourseCreateOneInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
}

input CourseCreateOneWithoutHolesInput {
  create: CourseCreateWithoutHolesInput
  connect: CourseWhereUniqueInput
}

input CourseCreateWithoutHolesInput {
  club: String!
  name: String!
}

"""An edge in a connection."""
type CourseEdge {
  """The item at the end of the edge."""
  node: Course!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  club_ASC
  club_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CoursePreviousValues {
  id: ID!
  club: String!
  name: String!
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
}

input CourseUpdateDataInput {
  club: String
  name: String
  holes: HoleUpdateManyWithoutCourseInput
}

input CourseUpdateInput {
  club: String
  name: String
  holes: HoleUpdateManyWithoutCourseInput
}

input CourseUpdateOneInput {
  create: CourseCreateInput
  connect: CourseWhereUniqueInput
  delete: Boolean
  update: CourseUpdateDataInput
  upsert: CourseUpsertNestedInput
}

input CourseUpdateOneWithoutHolesInput {
  create: CourseCreateWithoutHolesInput
  connect: CourseWhereUniqueInput
  delete: Boolean
  update: CourseUpdateWithoutHolesDataInput
  upsert: CourseUpsertWithoutHolesInput
}

input CourseUpdateWithoutHolesDataInput {
  club: String
  name: String
}

input CourseUpsertNestedInput {
  update: CourseUpdateDataInput!
  create: CourseCreateInput!
}

input CourseUpsertWithoutHolesInput {
  update: CourseUpdateWithoutHolesDataInput!
  create: CourseCreateWithoutHolesInput!
}

input CourseWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  club: String

  """All values that are not equal to given value."""
  club_not: String

  """All values that are contained in given list."""
  club_in: [String!]

  """All values that are not contained in given list."""
  club_not_in: [String!]

  """All values less than the given value."""
  club_lt: String

  """All values less than or equal the given value."""
  club_lte: String

  """All values greater than the given value."""
  club_gt: String

  """All values greater than or equal the given value."""
  club_gte: String

  """All values containing the given string."""
  club_contains: String

  """All values not containing the given string."""
  club_not_contains: String

  """All values starting with the given string."""
  club_starts_with: String

  """All values not starting with the given string."""
  club_not_starts_with: String

  """All values ending with the given string."""
  club_ends_with: String

  """All values not ending with the given string."""
  club_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  holes_every: HoleWhereInput
  holes_some: HoleWhereInput
  holes_none: HoleWhereInput
}

input CourseWhereUniqueInput {
  id: ID
}

type Hole implements Node {
  id: ID!
  course(where: CourseWhereInput): Course!
  index: Int!
  number: Int!
  par: Int!
}

"""A connection to a list of items."""
type HoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HoleEdge]!
  aggregate: AggregateHole!
}

input HoleCreateInput {
  index: Int!
  number: Int!
  par: Int!
  course: CourseCreateOneWithoutHolesInput!
}

input HoleCreateManyWithoutCourseInput {
  create: [HoleCreateWithoutCourseInput!]
  connect: [HoleWhereUniqueInput!]
}

input HoleCreateWithoutCourseInput {
  index: Int!
  number: Int!
  par: Int!
}

"""An edge in a connection."""
type HoleEdge {
  """The item at the end of the edge."""
  node: Hole!

  """A cursor for use in pagination."""
  cursor: String!
}

enum HoleOrderByInput {
  id_ASC
  id_DESC
  index_ASC
  index_DESC
  number_ASC
  number_DESC
  par_ASC
  par_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type HolePreviousValues {
  id: ID!
  index: Int!
  number: Int!
  par: Int!
}

type HoleSubscriptionPayload {
  mutation: MutationType!
  node: Hole
  updatedFields: [String!]
  previousValues: HolePreviousValues
}

input HoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HoleWhereInput
}

input HoleUpdateInput {
  index: Int
  number: Int
  par: Int
  course: CourseUpdateOneWithoutHolesInput
}

input HoleUpdateManyWithoutCourseInput {
  create: [HoleCreateWithoutCourseInput!]
  connect: [HoleWhereUniqueInput!]
  disconnect: [HoleWhereUniqueInput!]
  delete: [HoleWhereUniqueInput!]
  update: [HoleUpdateWithWhereUniqueWithoutCourseInput!]
  upsert: [HoleUpsertWithWhereUniqueWithoutCourseInput!]
}

input HoleUpdateWithoutCourseDataInput {
  index: Int
  number: Int
  par: Int
}

input HoleUpdateWithWhereUniqueWithoutCourseInput {
  where: HoleWhereUniqueInput!
  data: HoleUpdateWithoutCourseDataInput!
}

input HoleUpsertWithWhereUniqueWithoutCourseInput {
  where: HoleWhereUniqueInput!
  update: HoleUpdateWithoutCourseDataInput!
  create: HoleCreateWithoutCourseInput!
}

input HoleWhereInput {
  """Logical AND on all given filters."""
  AND: [HoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [HoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  index: Int

  """All values that are not equal to given value."""
  index_not: Int

  """All values that are contained in given list."""
  index_in: [Int!]

  """All values that are not contained in given list."""
  index_not_in: [Int!]

  """All values less than the given value."""
  index_lt: Int

  """All values less than or equal the given value."""
  index_lte: Int

  """All values greater than the given value."""
  index_gt: Int

  """All values greater than or equal the given value."""
  index_gte: Int
  number: Int

  """All values that are not equal to given value."""
  number_not: Int

  """All values that are contained in given list."""
  number_in: [Int!]

  """All values that are not contained in given list."""
  number_not_in: [Int!]

  """All values less than the given value."""
  number_lt: Int

  """All values less than or equal the given value."""
  number_lte: Int

  """All values greater than the given value."""
  number_gt: Int

  """All values greater than or equal the given value."""
  number_gte: Int
  par: Int

  """All values that are not equal to given value."""
  par_not: Int

  """All values that are contained in given list."""
  par_in: [Int!]

  """All values that are not contained in given list."""
  par_not_in: [Int!]

  """All values less than the given value."""
  par_lt: Int

  """All values less than or equal the given value."""
  par_lte: Int

  """All values greater than the given value."""
  par_gt: Int

  """All values greater than or equal the given value."""
  par_gte: Int
  course: CourseWhereInput
}

input HoleWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createHole(data: HoleCreateInput!): Hole!
  createScoringSession(data: ScoringSessionCreateInput!): ScoringSession!
  createTeam(data: TeamCreateInput!): Team!
  createCourse(data: CourseCreateInput!): Course!
  createPlayer(data: PlayerCreateInput!): Player!
  updateHole(data: HoleUpdateInput!, where: HoleWhereUniqueInput!): Hole
  updateScoringSession(data: ScoringSessionUpdateInput!, where: ScoringSessionWhereUniqueInput!): ScoringSession
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updatePlayer(data: PlayerUpdateInput!, where: PlayerWhereUniqueInput!): Player
  deleteHole(where: HoleWhereUniqueInput!): Hole
  deleteScoringSession(where: ScoringSessionWhereUniqueInput!): ScoringSession
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deletePlayer(where: PlayerWhereUniqueInput!): Player
  upsertHole(where: HoleWhereUniqueInput!, create: HoleCreateInput!, update: HoleUpdateInput!): Hole!
  upsertScoringSession(where: ScoringSessionWhereUniqueInput!, create: ScoringSessionCreateInput!, update: ScoringSessionUpdateInput!): ScoringSession!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  upsertPlayer(where: PlayerWhereUniqueInput!, create: PlayerCreateInput!, update: PlayerUpdateInput!): Player!
  updateManyHoles(data: HoleUpdateInput!, where: HoleWhereInput): BatchPayload!
  updateManyScoringSessions(data: ScoringSessionUpdateInput!, where: ScoringSessionWhereInput): BatchPayload!
  updateManyTeams(data: TeamUpdateInput!, where: TeamWhereInput): BatchPayload!
  updateManyCourses(data: CourseUpdateInput!, where: CourseWhereInput): BatchPayload!
  updateManyPlayers(data: PlayerUpdateInput!, where: PlayerWhereInput): BatchPayload!
  deleteManyHoles(where: HoleWhereInput): BatchPayload!
  deleteManyScoringSessions(where: ScoringSessionWhereInput): BatchPayload!
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  deleteManyPlayers(where: PlayerWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Player implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type PlayerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PlayerEdge]!
  aggregate: AggregatePlayer!
}

input PlayerCreateInput {
  name: String!
}

input PlayerCreateManyInput {
  create: [PlayerCreateInput!]
  connect: [PlayerWhereUniqueInput!]
}

"""An edge in a connection."""
type PlayerEdge {
  """The item at the end of the edge."""
  node: Player!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PlayerOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PlayerPreviousValues {
  id: ID!
  name: String!
}

type PlayerSubscriptionPayload {
  mutation: MutationType!
  node: Player
  updatedFields: [String!]
  previousValues: PlayerPreviousValues
}

input PlayerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PlayerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlayerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlayerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PlayerWhereInput
}

input PlayerUpdateDataInput {
  name: String
}

input PlayerUpdateInput {
  name: String
}

input PlayerUpdateManyInput {
  create: [PlayerCreateInput!]
  connect: [PlayerWhereUniqueInput!]
  disconnect: [PlayerWhereUniqueInput!]
  delete: [PlayerWhereUniqueInput!]
  update: [PlayerUpdateWithWhereUniqueNestedInput!]
  upsert: [PlayerUpsertWithWhereUniqueNestedInput!]
}

input PlayerUpdateWithWhereUniqueNestedInput {
  where: PlayerWhereUniqueInput!
  data: PlayerUpdateDataInput!
}

input PlayerUpsertWithWhereUniqueNestedInput {
  where: PlayerWhereUniqueInput!
  update: PlayerUpdateDataInput!
  create: PlayerCreateInput!
}

input PlayerWhereInput {
  """Logical AND on all given filters."""
  AND: [PlayerWhereInput!]

  """Logical OR on all given filters."""
  OR: [PlayerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PlayerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input PlayerWhereUniqueInput {
  id: ID
}

type Query {
  holes(where: HoleWhereInput, orderBy: HoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hole]!
  scoringSessions(where: ScoringSessionWhereInput, orderBy: ScoringSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ScoringSession]!
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player]!
  hole(where: HoleWhereUniqueInput!): Hole
  scoringSession(where: ScoringSessionWhereUniqueInput!): ScoringSession
  team(where: TeamWhereUniqueInput!): Team
  course(where: CourseWhereUniqueInput!): Course
  player(where: PlayerWhereUniqueInput!): Player
  holesConnection(where: HoleWhereInput, orderBy: HoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HoleConnection!
  scoringSessionsConnection(where: ScoringSessionWhereInput, orderBy: ScoringSessionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScoringSessionConnection!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  playersConnection(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlayerConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type ScoringSession implements Node {
  id: ID!
  course(where: CourseWhereInput): Course!
  currentHole: Int!
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player!]
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  status: String!
}

"""A connection to a list of items."""
type ScoringSessionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScoringSessionEdge]!
  aggregate: AggregateScoringSession!
}

input ScoringSessionCreateInput {
  currentHole: Int
  status: String
  course: CourseCreateOneInput!
  players: PlayerCreateManyInput
  teams: TeamCreateManyInput
}

"""An edge in a connection."""
type ScoringSessionEdge {
  """The item at the end of the edge."""
  node: ScoringSession!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ScoringSessionOrderByInput {
  id_ASC
  id_DESC
  currentHole_ASC
  currentHole_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ScoringSessionPreviousValues {
  id: ID!
  currentHole: Int!
  status: String!
}

type ScoringSessionSubscriptionPayload {
  mutation: MutationType!
  node: ScoringSession
  updatedFields: [String!]
  previousValues: ScoringSessionPreviousValues
}

input ScoringSessionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ScoringSessionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScoringSessionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScoringSessionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ScoringSessionWhereInput
}

input ScoringSessionUpdateInput {
  currentHole: Int
  status: String
  course: CourseUpdateOneInput
  players: PlayerUpdateManyInput
  teams: TeamUpdateManyInput
}

input ScoringSessionWhereInput {
  """Logical AND on all given filters."""
  AND: [ScoringSessionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScoringSessionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScoringSessionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  currentHole: Int

  """All values that are not equal to given value."""
  currentHole_not: Int

  """All values that are contained in given list."""
  currentHole_in: [Int!]

  """All values that are not contained in given list."""
  currentHole_not_in: [Int!]

  """All values less than the given value."""
  currentHole_lt: Int

  """All values less than or equal the given value."""
  currentHole_lte: Int

  """All values greater than the given value."""
  currentHole_gt: Int

  """All values greater than or equal the given value."""
  currentHole_gte: Int
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  course: CourseWhereInput
  players_every: PlayerWhereInput
  players_some: PlayerWhereInput
  players_none: PlayerWhereInput
  teams_every: TeamWhereInput
  teams_some: TeamWhereInput
  teams_none: TeamWhereInput
}

input ScoringSessionWhereUniqueInput {
  id: ID
}

type Subscription {
  hole(where: HoleSubscriptionWhereInput): HoleSubscriptionPayload
  scoringSession(where: ScoringSessionSubscriptionWhereInput): ScoringSessionSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  player(where: PlayerSubscriptionWhereInput): PlayerSubscriptionPayload
}

type Team implements Node {
  id: ID!
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player!]
}

"""A connection to a list of items."""
type TeamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  players: PlayerCreateManyInput
}

input TeamCreateManyInput {
  create: [TeamCreateInput!]
  connect: [TeamWhereUniqueInput!]
}

"""An edge in a connection."""
type TeamEdge {
  """The item at the end of the edge."""
  node: Team!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TeamPreviousValues {
  id: ID!
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
}

input TeamUpdateDataInput {
  players: PlayerUpdateManyInput
}

input TeamUpdateInput {
  players: PlayerUpdateManyInput
}

input TeamUpdateManyInput {
  create: [TeamCreateInput!]
  connect: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  delete: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueNestedInput!]
  upsert: [TeamUpsertWithWhereUniqueNestedInput!]
}

input TeamUpdateWithWhereUniqueNestedInput {
  where: TeamWhereUniqueInput!
  data: TeamUpdateDataInput!
}

input TeamUpsertWithWhereUniqueNestedInput {
  where: TeamWhereUniqueInput!
  update: TeamUpdateDataInput!
  create: TeamCreateInput!
}

input TeamWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  players_every: PlayerWhereInput
  players_some: PlayerWhereInput
  players_none: PlayerWhereInput
}

input TeamWhereUniqueInput {
  id: ID
}
